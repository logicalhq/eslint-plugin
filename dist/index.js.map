{"version":3,"file":"index.js","sources":["../lib/ast/interface.ts","../lib/ast/specifier.ts","../lib/utils/array.utils.ts","../lib/utils/ast.utils.ts","../lib/utils/token.utils.ts","../lib/utils/comment.utils.ts","../lib/ast/declaration.ts","../lib/utils/compare.utils.ts","../lib/strategies/logical.strategy.ts","../lib/utils/rule.utils.ts","../lib/rules/imports.rule.ts","../lib/rules/index.ts","../lib/index.ts"],"sourcesContent":["import { TSESLint, TSESTree } from '@typescript-eslint/experimental-utils';\n\nexport type Chunk<T> = Array<T extends TSESTree.BaseNode ? T : TSESTree.Node>;\n\nexport enum Punctuator {\n  OpenBrace = '{',\n  CloseBrace = '}',\n  OpenParen = '(',\n  CloseParen = ')',\n  OpenBracket = '[',\n  CloseBracket = ']',\n  Dot = '.',\n  DotDotDot = '...',\n  Semicolon = ';',\n  Comma = ',',\n  QuestionDot = '?.',\n  LessThan = '<',\n  LessThanSlash = '</',\n  GreaterThan = '>',\n  LessThanEquals = '<=',\n  GreaterThanEquals = '>=',\n  EqualsEquals = '==',\n  ExclamationEquals = '!=',\n  EqualsEqualsEquals = '===',\n  ExclamationEqualsEquals = '!==',\n  EqualsGreaterThan = '=>',\n  Plus = '+',\n  Minus = '-',\n  Asterisk = '*',\n  AsteriskAsterisk = '**',\n  Slash = '/',\n  Percent = '%',\n  PlusPlus = '++',\n  MinusMinus = '--',\n  LessThanLessThan = '<<',\n  GreaterThanGreaterThan = '>>',\n  GreaterThanGreaterThanGreaterThan = '>>>',\n  Ampersand = '&',\n  Bar = '|',\n  Caret = '^',\n  Exclamation = '!',\n  Tilde = '~',\n  AmpersandAmpersand = '&&',\n  BarBar = '||',\n  Question = '?',\n  Colon = ' =',\n  At = '@',\n  QuestionQuestion = '??',\n  Backtick = '`',\n  Equals = '=',\n  PlusEquals = '+=',\n  MinusEquals = '-=',\n  AsteriskEquals = '*=',\n  AsteriskAsteriskEquals = '**=',\n  SlashEquals = '/=',\n  PercentEquals = '%=',\n  LessThanLessThanEquals = '<<=',\n  GreaterThanGreaterThanEquals = '>>=',\n  GreaterThanGreaterThanGreaterThanEquals = '>>>=',\n  AmpersandEquals = '&=',\n  BarEquals = '|=',\n  BarBarEquals = '||=',\n  AmpersandAmpersandEquals = '&&=',\n  QuestionQuestionEquals = '??=',\n  CaretEquals = '^='\n}\n\nexport enum Character {\n  Empty = '',\n  Formfeed = '\\f',\n  Newline = '\\n',\n  Tab = '\\t',\n  VerticalTab = '\\v',\n  Space = ' '\n}\n\nexport enum Trivia {\n  Comma = 'Comma',\n  Empty = 'Empty',\n  Formfeed = 'Formfeed',\n  Garbage = 'Garbage',\n  Newline = 'Newline',\n  Space = 'Space',\n  Semicolon = 'Semicolon',\n  Tab = 'Tab',\n  VerticalTab = 'VerticalTab'\n}\n\nexport const PATTERNS = {\n  newline: /(\\r?\\n|[\\r\\n\\u2028\\u2029])/,\n  space: /^(\\s+)$/\n};\n\nexport type TriviaToken =\n  | { type: Trivia.Comma; value: Punctuator.Comma }\n  | { type: Trivia.Empty; value: Character.Empty }\n  | { type: Trivia.Formfeed; value: Character.Formfeed }\n  | { type: Trivia.Garbage; value: string }\n  | { type: Trivia.Newline; value: string }\n  | { type: Trivia.Semicolon; value: string }\n  | {\n      type: Trivia.Space;\n      value: string;\n      occurences: number;\n    }\n  | { type: Trivia.Tab; value: Character.Tab }\n  | { type: Trivia.VerticalTab; value: Character.VerticalTab };\n\nexport interface NodeAndSourceCodeOptions {\n  node: TSESTree.Node;\n  sourceCode: Readonly<TSESLint.SourceCode>;\n}\n","import { TSESTree } from '@typescript-eslint/experimental-utils';\n\nimport { TriviaToken } from 'lib/ast/interface';\n\nexport enum SpecifierPosition {\n  Before = 'before',\n  After = 'after'\n}\n\nexport class Specifier {\n  public position: SpecifierPosition | undefined = SpecifierPosition.Before;\n\n  public before: Array<TSESTree.Token | TriviaToken> = [];\n\n  public after: Array<TSESTree.Token | TriviaToken> = [];\n\n  public tokens: Array<TSESTree.Token | TriviaToken> = [];\n\n  public node: TSESTree.ImportSpecifier;\n\n  public hasComma = false;\n}\n","// https://github.com/tc39/proposal-array-find-from-last\nexport function findLastIndex<T>(\n  array: Array<T>,\n  callbackFn: (element: T, idx: number, array: Array<T>) => boolean\n): number {\n  for (let idx = array.length - 1; idx >= 0; idx--) {\n    if (callbackFn(array[idx], idx, array)) return idx;\n  }\n  return -1;\n}\n","import { TSESLint, TSESTree } from '@typescript-eslint/experimental-utils';\n\nimport {\n  Character,\n  Chunk,\n  NodeAndSourceCodeOptions,\n  PATTERNS,\n  Trivia,\n  TriviaToken\n} from 'lib/ast/interface';\n\nexport interface ObtainLastLineOptions<T> {\n  node: TSESTree.ImportDeclaration;\n  idx: number;\n  chunk: Chunk<T>;\n}\n\nexport interface ObtainCommentsBeforeOptions extends NodeAndSourceCodeOptions {\n  idx: number;\n  lastLine: number;\n}\n\nexport function obtainLastLine<T extends Array<TSESTree.BaseNode>>({\n  node,\n  idx,\n  chunk\n}: ObtainLastLineOptions<T>): number {\n  if (idx === 0) return node.loc.start.line - 1;\n  return chunk[idx - 1].loc.end.line;\n}\n\nexport function obtainCommentsBefore({\n  node,\n  idx,\n  sourceCode,\n  lastLine\n}: ObtainCommentsBeforeOptions): Array<TSESTree.Comment> {\n  return sourceCode\n    .getCommentsBefore(node)\n    .filter((comment: TSESTree.Comment) => {\n      return (\n        comment.loc.start.line <= node.loc.start.line &&\n        comment.loc.end.line > lastLine &&\n        (idx > 0 || comment.loc.start.line > lastLine)\n      );\n    });\n}\n\nexport function obtainCommentsAfter({\n  node,\n  sourceCode\n}: NodeAndSourceCodeOptions): Array<TSESTree.Comment> {\n  return sourceCode\n    .getCommentsAfter(node)\n    .filter(\n      (comment: TSESTree.Comment) => comment.loc.end.line === node.loc.end.line\n    );\n}\n\nexport function obtainIndentation({\n  node,\n  sourceCode\n}: NodeAndSourceCodeOptions): string {\n  const tokenBefore = sourceCode.getTokenBefore(node, {\n    includeComments: true\n  });\n  const lines = sourceCode.text\n    .slice(tokenBefore === null ? 0 : tokenBefore.range[1], node.range[0])\n    .split(PATTERNS.newline);\n\n  if (tokenBefore === null) return lines.at(-1) as string;\n  return lines.length > 1 ? (lines.at(-1) as string) : Character.Empty;\n}\n\nexport function obtainNewline(\n  sourceCode: Readonly<TSESLint.SourceCode>\n): string {\n  return PATTERNS.newline.exec(sourceCode.text)?.[0] ?? Character.Newline;\n}\n\nexport function requiresHeadNewline(\n  tokens: Array<TSESTree.Token | TriviaToken>\n): boolean {\n  const filtered = tokens.filter(token => token.type !== Trivia.Space);\n  if (!filtered.length) return false;\n  const [firstToken] = filtered;\n\n  return (\n    firstToken.type === TSESTree.AST_TOKEN_TYPES.Line ||\n    (firstToken.type === TSESTree.AST_TOKEN_TYPES.Block &&\n      PATTERNS.newline.test(firstToken.value))\n  );\n}\n","import { TSESTree } from '@typescript-eslint/experimental-utils';\n\nimport {\n  Character,\n  PATTERNS,\n  Punctuator,\n  Trivia,\n  TriviaToken\n} from 'lib/ast/interface';\nimport { NodeAndSourceCodeOptions } from 'lib/ast/interface';\n\nexport const TAIL_MAX_SEQUENCE = 5;\n\nexport function tokenizeTrivia(str: string): Array<TriviaToken> {\n  let substrings = str.split(PATTERNS.newline);\n\n  substrings =\n    substrings.length >= TAIL_MAX_SEQUENCE\n      ? substrings.slice(0, 2).concat(substrings.slice(-1))\n      : substrings;\n\n  return substrings\n    .map((value: string): TriviaToken => {\n      if (value.length === 0) {\n        return { type: Trivia.Empty, value: Character.Empty };\n      } else if (PATTERNS.newline.test(value)) {\n        return { type: Trivia.Newline, value: Character.Newline };\n      } else if (value === Punctuator.Comma) {\n        return { type: Trivia.Comma, value };\n      } else if (PATTERNS.space.test(value)) {\n        return {\n          type: Trivia.Space,\n          value,\n          occurences: value.length\n        };\n      }\n      return { type: Trivia.Garbage, value };\n    })\n    .filter(\n      token => token.type !== Trivia.Garbage && token.type !== Trivia.Empty\n    );\n}\n\nexport function tokenize({\n  node,\n  sourceCode\n}: NodeAndSourceCodeOptions): Array<TSESTree.Token | TriviaToken> {\n  return sourceCode\n    .getTokens(node)\n    .flatMap(\n      (token: TSESTree.Token, idx: number, tokens: Array<TSESTree.Token>) => {\n        if (idx === tokens.length - 1) return [token];\n\n        const comments = sourceCode.getCommentsAfter(token);\n        const last =\n          comments.length > 0 ? (comments.at(-1) as TSESTree.Comment) : token;\n        const nextToken = tokens[idx + 1];\n\n        return [\n          token,\n          ...comments.flatMap((comment: TSESTree.Comment, cidx: number) => {\n            const sibling = cidx === 0 ? token : comments[cidx - 1];\n            return [\n              ...tokenizeTrivia(\n                sourceCode.text.slice(sibling.range[1], comment.range[0])\n              ),\n              {\n                ...comment,\n                value: sourceCode.text.slice(comment.range[0], comment.range[1])\n              }\n            ];\n          }),\n          ...tokenizeTrivia(\n            sourceCode.text.slice(last.range[1], nextToken.range[0])\n          )\n        ];\n      }\n    );\n}\n","import { TSESLint, TSESTree } from '@typescript-eslint/experimental-utils';\n\nimport { Character, NodeAndSourceCodeOptions } from 'lib/ast/interface';\nimport { tokenizeTrivia } from 'lib/utils/token.utils';\n\nexport enum CommentPosition {\n  Before = 'before',\n  After = 'after'\n}\n\nexport interface RenderCommentOptions {\n  comment: TSESTree.Comment;\n  sourceCode: Readonly<TSESLint.SourceCode>;\n  trivia: string;\n  position: CommentPosition;\n}\n\nexport interface RenderCommentsOptions extends NodeAndSourceCodeOptions {\n  comments: Array<TSESTree.Comment>;\n  position: CommentPosition;\n}\n\nexport function renderComment({\n  comment,\n  sourceCode,\n  trivia,\n  position\n}: RenderCommentOptions): string {\n  const text = sourceCode.text.slice(comment.range[0], comment.range[1]);\n  return position === CommentPosition.Before\n    ? text.concat(\n        tokenizeTrivia(trivia)\n          .map(token => token.value)\n          .join(Character.Empty)\n      )\n    : tokenizeTrivia(trivia)\n        .map(token => token.value)\n        .join(Character.Empty)\n        .concat(text);\n}\n\nexport function renderComments({\n  node,\n  sourceCode,\n  comments,\n  position\n}: RenderCommentsOptions): string {\n  return comments\n    .map((comment: TSESTree.Comment, idx: number) => {\n      let trivia: string;\n      switch (position) {\n        case CommentPosition.Before:\n          trivia = sourceCode.text.slice(\n            comment.range[1],\n            (idx === comments.length - 1 ? node : comments[idx + 1]).range[0]\n          );\n          break;\n        default:\n          trivia = sourceCode.text.slice(\n            (idx === 0 ? node : comments[idx - 1]).range[1],\n            comment.range[0]\n          );\n          break;\n      }\n      return renderComment({ comment, sourceCode, trivia, position });\n    })\n    .join(Character.Empty);\n}\n","import { TSESLint, TSESTree } from '@typescript-eslint/experimental-utils';\n\nimport {\n  Character,\n  Chunk,\n  PATTERNS,\n  Punctuator,\n  Trivia,\n  TriviaToken\n} from 'lib/ast/interface';\nimport { Specifier, SpecifierPosition } from 'lib/ast/specifier';\nimport { ImportsStrategy } from 'lib/strategies/interface';\nimport { findLastIndex } from 'lib/utils/array.utils';\nimport {\n  obtainCommentsAfter,\n  obtainCommentsBefore,\n  obtainIndentation,\n  obtainLastLine,\n  requiresHeadNewline\n} from 'lib/utils/ast.utils';\nimport { CommentPosition, renderComments } from 'lib/utils/comment.utils';\nimport { tokenize } from 'lib/utils/token.utils';\n\nexport interface ImportSegments {\n  commentsBefore: Array<TSESTree.Comment>;\n  commentsAfter: Array<TSESTree.Comment>;\n  indentation: string;\n}\n\nexport interface SpecifiersState {\n  before: Array<TSESTree.Token | TriviaToken>;\n  after: Array<TSESTree.Token | TriviaToken>;\n  identifiers: Array<Specifier>;\n}\n\nexport interface AugmentedImportDeclarationOptions {\n  node: Readonly<TSESTree.ImportDeclaration>;\n  idx: Readonly<number>;\n  sourceCode: Readonly<TSESLint.SourceCode>;\n  chunk: Chunk<TSESTree.ImportDeclaration>;\n  strategy: ImportsStrategy;\n}\n\n//\n// From: https://tc39.es/ecma262/multipage/ecmascript-language-scripts-and-modules.html#prod-ImportDeclaration\n//\n// ▽─ ─ ─ ─ ─ ─ ─ Import Declaration ─ ─ ─ ─ ─ ─ ─ ─▽\n// ▽─ ─ ─ ─ Import Clause ─ ─ ─ ─▽ ▽─ From Clause- ─▽\n//          ▽─ ─ Imports List ─ ─▽\n//                  ▼ Specifier ▼\n// ┌────────────────────────────────────────────────┐\n// │ import { lexer, tree as AST } from 'carthage'; │\n// └────────────────────────────────────────────────┘\n//     ▼─ Identifier ─▼     ▽ ─ ─ ─ ─ Binding ─ ─ ─ ─ ▽\n// ┌─────────────────────────────────────────────────────┐\n// │ { ImportDeclaration as AugmentedImportDeclaration } │\n// └─────────────────────────────────────────────────────┘\n//          ▼▼▼▼▼▼▼▼▼ SpecifierTokens  ▼ TriviaTokens\n// ┌─────────────────────────────────────┐\n// │ import { lexer } from 'carthage';\\n │\n// └─────────────────────────────────────┘\n//\nexport class AugmentedImportDeclaration {\n  protected _braceTokenRange!: [number, number];\n\n  protected _importSpecifiers!: Array<TSESTree.ImportSpecifier>;\n\n  protected _value!: string;\n\n  protected _tokens!: Array<TSESTree.Token | TriviaToken>;\n\n  protected _importSpecifierTokens!: Array<TSESTree.Token | TriviaToken>;\n\n  protected _specifiersState: SpecifiersState = {\n    before: [],\n    after: [],\n    identifiers: []\n  };\n\n  protected _segments!: ImportSegments;\n\n  public constructor(\n    public readonly options: AugmentedImportDeclarationOptions\n  ) {}\n\n  public get node(): Readonly<TSESTree.ImportDeclaration> {\n    return this.options.node;\n  }\n\n  public get sourceCode(): Readonly<TSESLint.SourceCode> {\n    return this.options.sourceCode;\n  }\n\n  public get idx(): Readonly<number> {\n    return this.options.idx;\n  }\n\n  public get source(): Readonly<string> {\n    return (\n      this.node.source.value ??\n      (this.node.source as unknown as Record<string, unknown>).name\n    );\n  }\n\n  public get segments(): ImportSegments {\n    const { node, idx, sourceCode, chunk } = this.options;\n    return (this._segments ??= {\n      commentsBefore: obtainCommentsBefore({\n        node,\n        idx,\n        sourceCode,\n        lastLine: obtainLastLine({\n          node,\n          idx,\n          chunk\n        })\n      }),\n      commentsAfter: obtainCommentsAfter({\n        node,\n        sourceCode\n      }),\n      indentation: obtainIndentation({\n        node,\n        sourceCode\n      })\n    });\n  }\n\n  public get tokens(): Array<TSESTree.Token | TriviaToken> {\n    const { node, sourceCode } = this;\n    return (this._tokens ??= tokenize({ node, sourceCode }));\n  }\n\n  public get importClauses(): Array<TSESTree.ImportClause> {\n    return this.node.specifiers;\n  }\n\n  public get importSpecifiers(): Array<TSESTree.ImportSpecifier> {\n    return (this._importSpecifiers ??= this.importClauses.filter(\n      clause => clause.type === TSESTree.AST_NODE_TYPES.ImportSpecifier\n    ) as Array<TSESTree.ImportSpecifier>);\n  }\n\n  public get braceTokenRange(): [number, number] {\n    return (this._braceTokenRange ??= [\n      this.tokens.findIndex(\n        token =>\n          token.type === TSESTree.AST_TOKEN_TYPES.Punctuator &&\n          token.value === Punctuator.OpenBrace\n      ),\n      this.tokens.findIndex(\n        token =>\n          token.type === TSESTree.AST_TOKEN_TYPES.Punctuator &&\n          token.value === Punctuator.CloseBrace\n      )\n    ]);\n  }\n\n  public get importSpecifierTokens(): Array<TSESTree.Token | TriviaToken> {\n    return this.tokens.slice(\n      this.braceTokenRange[0] + 1,\n      this.braceTokenRange[1]\n    );\n  }\n\n  public get specifiersState(): SpecifiersState {\n    if (this._specifiersState.identifiers.length) {\n      return this._specifiersState;\n    }\n\n    let specifier = new Specifier();\n    this.importSpecifierTokens.forEach(token => {\n      switch (specifier.position) {\n        case SpecifierPosition.Before:\n          specifier = this.handleBeforeIdentifier(specifier, token);\n          break;\n\n        case SpecifierPosition.After:\n          specifier = this.handleAfterIdentifier(specifier, token);\n          break;\n\n        default:\n          this.handleIdentifier(specifier, token);\n      }\n    });\n\n    this.handleLastSpecifier(specifier);\n    this._specifiersState.identifiers = this.updateIdentifierNodes(\n      this._specifiersState.identifiers\n    );\n\n    return this._specifiersState;\n  }\n\n  public hasSpecifiers(): boolean {\n    return (\n      !this.braceTokenRange.includes(-1) && this.importSpecifiers.length >= 1\n    );\n  }\n\n  public isSideEffect(): boolean {\n    return (\n      !this.importClauses.length &&\n      (!this.node.importKind || this.node.importKind === 'value') &&\n      this.sourceCode.getFirstToken(this.node, { skip: 1 })?.value !==\n        Punctuator.OpenBrace\n    );\n  }\n\n  public renderTokens(): string {\n    const lastToken = this.tokens[this.tokens.length - 1];\n\n    const hasSemicolon =\n      lastToken &&\n      lastToken.type === TSESTree.AST_TOKEN_TYPES.Punctuator &&\n      lastToken.value === Punctuator.Semicolon;\n\n    const tokens = hasSemicolon\n      ? this.tokens\n      : [\n          ...this.tokens,\n          { type: Trivia.Semicolon, value: Punctuator.Semicolon }\n        ];\n\n    return tokens.map(token => token.value).join(Character.Empty);\n  }\n\n  public renderNode(): string {\n    if (!this.hasSpecifiers()) return this.renderTokens();\n\n    const lastSpecifierToken = this.sourceCode.getTokenBefore(\n      this.tokens[this.braceTokenRange[1]] as TSESTree.Token\n    );\n\n    const hasTrailingComma =\n      lastSpecifierToken?.type === TSESTree.AST_TOKEN_TYPES.Punctuator &&\n      lastSpecifierToken.value === Punctuator.Comma;\n\n    const {\n      identifiers,\n      before: beforeIdentifiers,\n      after: afterIdentifiers\n    } = this.specifiersState;\n\n    const sortedIdentifiers = this.options.strategy\n      .sortIdentifiers(identifiers)\n      .flatMap((identifier, idx, array) => {\n        const previous = array[idx - 1];\n\n        const headNewline =\n          previous &&\n          requiresHeadNewline(identifier.before) &&\n          !(\n            previous.after.length &&\n            previous.after[previous.after.length - 1].type === Trivia.Newline\n          )\n            ? [{ type: Trivia.Newline, value: Character.Newline }]\n            : [];\n\n        if (\n          identifiers.findIndex(id => id === identifier) === 0 &&\n          requiresHeadNewline(beforeIdentifiers)\n        ) {\n          headNewline.push({ type: Trivia.Newline, value: Character.Newline });\n        }\n\n        let after = requiresHeadNewline(beforeIdentifiers)\n          ? identifier.after.filter(id => id.type !== Trivia.Space).length\n            ? identifier.after\n            : []\n          : identifier.after;\n\n        if (identifier.hasComma) {\n          const nonblankPredicate = (token: TSESTree.Token | TriviaToken) =>\n            token.type !== Trivia.Newline && token.type !== Trivia.Space;\n          let firstNonblankIdx =\n            idx < array.length - 1 || hasTrailingComma\n              ? -1\n              : after.findIndex(nonblankPredicate);\n          firstNonblankIdx = firstNonblankIdx === -1 ? 0 : firstNonblankIdx;\n          const lastNonblankIdx = findLastIndex(after, nonblankPredicate);\n\n          if (lastNonblankIdx === -1) {\n            after = after.slice(firstNonblankIdx);\n          } else if (\n            after\n              .slice(lastNonblankIdx + 1)\n              .filter(token => token.type !== Trivia.Space).length\n          ) {\n            after = after.slice(firstNonblankIdx);\n          } else {\n            after = after.slice(firstNonblankIdx, lastNonblankIdx + 1);\n          }\n        }\n\n        return [\n          ...headNewline,\n          ...identifier.before,\n          ...identifier.tokens,\n          ...(idx < array.length - 1 || hasTrailingComma\n            ? [{ type: Trivia.Comma, value: Punctuator.Comma }]\n            : []),\n          ...after\n        ];\n      });\n\n    const tokens = [\n      ...this.tokens.slice(0, this.braceTokenRange[0] + 1),\n      ...beforeIdentifiers,\n      ...sortedIdentifiers,\n      ...(requiresHeadNewline(afterIdentifiers) &&\n      sortedIdentifiers[sortedIdentifiers.length - 1].type !== Trivia.Newline\n        ? [{ type: Trivia.Newline, value: Character.Newline }]\n        : []),\n      ...afterIdentifiers,\n      ...this.tokens.slice(this.braceTokenRange[1])\n    ];\n\n    const lastToken = tokens[tokens.length - 1];\n    const hasSemicolon =\n      lastToken.type === TSESTree.AST_TOKEN_TYPES.Punctuator &&\n      lastToken.value === Punctuator.Semicolon;\n\n    if (!hasSemicolon) {\n      tokens.push({\n        type: Trivia.Semicolon,\n        value: Punctuator.Semicolon\n      });\n    }\n\n    return tokens.map(token => token.value).join(Character.Empty);\n  }\n\n  public toString(): string {\n    const { node, sourceCode } = this;\n    const { indentation } = this.segments;\n\n    return (this._value ??= String().concat(\n      indentation,\n      renderComments({\n        node,\n        sourceCode,\n        comments: this.segments.commentsBefore,\n        position: CommentPosition.Before\n      }),\n      this.renderNode(),\n      renderComments({\n        node,\n        sourceCode,\n        comments: this.segments.commentsAfter,\n        position: CommentPosition.After\n      })\n    ));\n  }\n\n  protected handleBeforeIdentifier(\n    specifier: Specifier,\n    token: TSESTree.Token | TriviaToken\n  ): Specifier {\n    switch (token.type) {\n      case Trivia.Newline:\n        specifier.before.push(token);\n        if (\n          !this._specifiersState.before.length &&\n          !this._specifiersState.identifiers.length\n        ) {\n          this._specifiersState.before = specifier.before;\n          specifier = new Specifier();\n        }\n        break;\n\n      case Trivia.Space:\n      case TSESTree.AST_TOKEN_TYPES.Block:\n      case TSESTree.AST_TOKEN_TYPES.Line:\n        specifier.before.push(token);\n        break;\n\n      case TSESTree.AST_TOKEN_TYPES.Identifier:\n        if (\n          !this._specifiersState.before.length &&\n          !this._specifiersState.identifiers.length\n        ) {\n          this._specifiersState.before = specifier.before;\n          specifier = new Specifier();\n        }\n        specifier.position = undefined;\n        specifier.tokens.push(token);\n    }\n\n    return specifier;\n  }\n\n  protected handleAfterIdentifier(\n    specifier: Specifier,\n    token: TSESTree.Token | TriviaToken\n  ): Specifier {\n    switch (token.type) {\n      case Trivia.Newline:\n        specifier.after.push(token);\n        this._specifiersState.identifiers.push(specifier);\n        specifier = new Specifier();\n        break;\n\n      case Trivia.Space:\n      case TSESTree.AST_TOKEN_TYPES.Line:\n        specifier.after.push(token);\n        break;\n\n      case TSESTree.AST_TOKEN_TYPES.Block:\n        if (PATTERNS.newline.test(token.value)) {\n          this._specifiersState.identifiers.push(specifier);\n          specifier = new Specifier();\n          specifier.before.push(token);\n        } else {\n          specifier.after.push(token);\n        }\n        break;\n\n      case TSESTree.AST_TOKEN_TYPES.Identifier:\n        this._specifiersState.identifiers.push(specifier);\n        specifier = new Specifier();\n        specifier.position = undefined;\n        specifier.tokens.push(token);\n        break;\n    }\n\n    return specifier;\n  }\n\n  protected handleIdentifier(\n    specifier: Specifier,\n    token: TSESTree.Token | TriviaToken\n  ): void {\n    switch (token.type) {\n      case TSESTree.AST_TOKEN_TYPES.Punctuator:\n        if (token.value === Punctuator.Comma) {\n          specifier.hasComma = true;\n          specifier.position = SpecifierPosition.After;\n        }\n        break;\n\n      default:\n        specifier.tokens.push(token);\n    }\n  }\n\n  protected handleLastSpecifier(specifier: Specifier): void {\n    switch (specifier.position) {\n      case SpecifierPosition.Before:\n        this._specifiersState.after = specifier.before;\n        break;\n\n      case SpecifierPosition.After:\n        if (specifier.after.at(-1)?.type === Trivia.Space) {\n          this._specifiersState.after = [\n            specifier.after.pop() as TSESTree.Token | TriviaToken\n          ];\n        }\n        this._specifiersState.identifiers.push(specifier);\n        break;\n\n      default:\n        const lastIdentifierIdx = findLastIndex(\n          specifier.tokens,\n          token =>\n            token.type === TSESTree.AST_TOKEN_TYPES.Identifier ||\n            token.type === TSESTree.AST_TOKEN_TYPES.Keyword\n        );\n\n        const tokens = specifier.tokens.slice(0, lastIdentifierIdx + 1);\n        const after = specifier.tokens.slice(lastIdentifierIdx + 1);\n\n        let newlineIdx = after.findIndex(t => t.type === Trivia.Newline);\n\n        if (newlineIdx !== -1) newlineIdx += 1;\n\n        const blockIdx = after.findIndex(\n          t =>\n            t.type === TSESTree.AST_TOKEN_TYPES.Block &&\n            PATTERNS.newline.test(t.value)\n        );\n\n        let sliceIdx = -1;\n\n        if (newlineIdx >= 0 && blockIdx >= 0) {\n          sliceIdx = Math.min(newlineIdx, blockIdx);\n        } else if (newlineIdx >= 0) {\n          sliceIdx = newlineIdx;\n        } else if (blockIdx >= 0) {\n          sliceIdx = blockIdx;\n        } else if (after.at(-1)?.type === Trivia.Space) {\n          sliceIdx = after.length;\n        }\n\n        specifier.tokens = tokens;\n        specifier.after = sliceIdx === -1 ? after : after.slice(0, sliceIdx);\n        this._specifiersState.identifiers.push(specifier);\n        this._specifiersState.after =\n          sliceIdx === -1 ? [] : after.slice(sliceIdx);\n    }\n  }\n\n  protected updateIdentifierNodes(\n    identifiers: Array<Specifier>\n  ): Array<Specifier> {\n    return identifiers.map((identifier, idx) => {\n      identifier.node = this.importSpecifiers[idx];\n      return identifier;\n    });\n  }\n}\n","export function compareString(x: string, y: string): number {\n  const result = new Intl.Collator('en', {\n    sensitivity: 'base',\n    numeric: true\n  }).compare(x, y);\n\n  if (result !== 0) return result;\n  return x === y ? 0 : x < y ? -1 : 1;\n}\n","import { AugmentedImportDeclaration } from 'lib/ast/declaration';\nimport { Character, Punctuator } from 'lib/ast/interface';\nimport { Specifier } from 'lib/ast/specifier';\nimport { ImportsStrategy, StrategyOptions } from 'lib/strategies/interface';\nimport { findLastIndex } from 'lib/utils/array.utils';\nimport { compareString } from 'lib/utils/compare.utils';\n\n/* istanbul ignore next */\nexport const builtin = [\n  'assert',\n  'async_hooks',\n  'buffer',\n  'child_process',\n  'cluster',\n  'console',\n  'constants',\n  'crypto',\n  'dgram',\n  'dns',\n  'domain',\n  'events',\n  'fs',\n  'http',\n  'http2',\n  'https',\n  'inspector',\n  'module',\n  'net',\n  'os',\n  'path',\n  'perf_hooks',\n  'process',\n  'punycode',\n  'querystring',\n  'readline',\n  'repl',\n  'stream',\n  'string_decoder',\n  'timers',\n  'tls',\n  'trace_events',\n  'tty',\n  'url',\n  'util',\n  'v8',\n  'vm',\n  'wasi',\n  'worker_threads',\n  'zlib'\n];\n\nexport class LogicalStrategy implements ImportsStrategy {\n  public constructor(protected options: StrategyOptions) {}\n\n  public get scopes(): string[] {\n    return this.options.scopes ?? [];\n  }\n\n  public hasScope(source: string): boolean {\n    return this.scopes.map(scope => source.startsWith(scope)).includes(true);\n  }\n\n  public renderImports(\n    declarations: Array<AugmentedImportDeclaration>\n  ): string {\n    const rendered = Object.fromEntries(\n      Object.entries(this.groupDeclarations(declarations)).map(\n        ([name, group]) => {\n          const sorted = this.sortDeclarations(group);\n          const requiresNewline =\n            !group.at(-1)?.segments.commentsAfter.length &&\n            sorted.at(-1)?.segments.commentsAfter.length;\n          const declarations = group.length\n            ? sorted\n                .map(declaration => declaration.toString())\n                .join(Character.Newline)\n                .concat(requiresNewline ? Character.Newline : Character.Empty)\n            : Character.Empty;\n\n          return [name, declarations];\n        }\n      )\n    );\n\n    return String().concat(\n      rendered.builtin,\n      rendered.builtin.length && rendered.vendor.length\n        ? Character.Newline\n        : Character.Empty,\n      rendered.vendor,\n      (rendered.builtin.length || rendered.vendor.length) &&\n        rendered.local.length\n        ? Character.Newline.repeat(2)\n        : Character.Empty,\n      rendered.local\n    );\n  }\n\n  public groupDeclarations(\n    declarations: Array<AugmentedImportDeclaration>\n  ): Record<string, Array<AugmentedImportDeclaration>> {\n    const groups: Record<string, Array<AugmentedImportDeclaration>> = {\n      builtin: [],\n      vendor: [],\n      local: []\n    };\n\n    for (const declaration of declarations) {\n      switch (declaration.node.importKind) {\n        case 'type':\n        case 'value':\n          const source = declaration.node.source.value as string;\n          if (builtin.includes(source)) {\n            groups.builtin.push(declaration);\n          } else if (\n            source.charAt(0) === Punctuator.Dot ||\n            this.hasScope(source)\n          ) {\n            groups.local.push(declaration);\n          } else {\n            groups.vendor.push(declaration);\n          }\n          break;\n      }\n    }\n\n    return groups;\n  }\n\n  public sortIdentifiers(identifiers: Array<Specifier>): Array<Specifier> {\n    return identifiers\n      .slice()\n      .sort(\n        ({ node: a }, { node: b }) =>\n          compareString(a.imported?.name, b.imported?.name) ||\n          compareString(a.local?.name, b.local?.name)\n      );\n  }\n\n  public sortDeclarations(\n    declarations: Array<AugmentedImportDeclaration>\n  ): Array<AugmentedImportDeclaration> {\n    return declarations.slice().sort((a, b) => {\n      if (a.isSideEffect() || b.isSideEffect()) {\n        return this.compareSideEffects(a, b);\n      } else if (this.hasScope(a.source) || this.hasScope(b.source)) {\n        return this.compareScopes(a, b);\n      } else if (a.hasSpecifiers() || b.hasSpecifiers()) {\n        return this.compareSpecifiers(a, b);\n      }\n\n      const result = this.compareDeclarationSource(a, b);\n      return result === 0 ? a.idx - b.idx : result;\n    });\n  }\n\n  public compareSideEffects(\n    a: AugmentedImportDeclaration,\n    b: AugmentedImportDeclaration\n  ): number {\n    let result = this.compareDeclaration(a, b, declaration =>\n      declaration.isSideEffect()\n    );\n    if (result !== 0) return result;\n\n    result = this.compareDeclarationSource(a, b);\n    return result === 0 ? a.idx - b.idx : result;\n  }\n\n  public compareScopes(\n    a: AugmentedImportDeclaration,\n    b: AugmentedImportDeclaration\n  ): number {\n    const pos = {\n      a: findLastIndex(this.scopes, scope => a.source.startsWith(scope)),\n      b: findLastIndex(this.scopes, scope => b.source.startsWith(scope))\n    };\n\n    if (pos.a === pos.b) {\n      const result = this.compareDeclarationSource(a, b);\n      return result === 0 ? a.idx - b.idx : result;\n    }\n\n    return pos.a < pos.b ? -1 : 1;\n  }\n\n  public compareSpecifiers(\n    a: AugmentedImportDeclaration,\n    b: AugmentedImportDeclaration\n  ): number {\n    let result = this.compareDeclarationSource(a, b);\n    if (result !== 0) return result;\n\n    result = this.compareDeclaration(a, b, declaration =>\n      declaration.hasSpecifiers()\n    );\n    if (result !== 0) return result;\n\n    return a.idx - b.idx;\n  }\n\n  public compareDeclaration(\n    a: AugmentedImportDeclaration,\n    b: AugmentedImportDeclaration,\n    condition: (declaration: AugmentedImportDeclaration) => boolean\n  ): number {\n    if (condition(a) && condition(b)) return 0;\n    return condition(a) ? 1 : -1;\n  }\n\n  public compareDeclarationSource(\n    a: AugmentedImportDeclaration,\n    b: AugmentedImportDeclaration\n  ): number {\n    if (\n      a.source.charAt(0) === Punctuator.At &&\n      b.source.charAt(0) !== Punctuator.At\n    ) {\n      return 1;\n    }\n\n    if (\n      a.source.charAt(0) !== Punctuator.At &&\n      b.source.charAt(0) === Punctuator.At\n    ) {\n      return -1;\n    }\n\n    return compareString(a.source, b.source);\n  }\n}\n","import { ESLintUtils } from '@typescript-eslint/experimental-utils';\n\nimport { version } from '../../package.json';\n\nexport const createRule = ESLintUtils.RuleCreator(\n  (name: string) =>\n    `https://github.com/logicalhq/eslint-plugin/blob/v${version}/lib/rules/${name}.md`\n);\n","// A rule that sorts the imports by following an imports strategy.\n// Some types are added explicitly for better readability and maintainability.\n\nimport { TSESLint, TSESTree } from '@typescript-eslint/experimental-utils';\n\nimport { AugmentedImportDeclaration } from 'lib/ast/declaration';\nimport { Chunk, Punctuator } from 'lib/ast/interface';\nimport { ImportsStrategy, StrategyClass } from 'lib/strategies/interface';\nimport { LogicalStrategy } from 'lib/strategies/logical.strategy';\nimport { createRule } from 'lib/utils/rule.utils';\n\nexport type MessageId = 'imports';\n\nexport type Options = [{ strategy?: string; scopes?: string[] }];\n\nexport interface InspectImportOrderOptions {\n  program: TSESTree.Program;\n  context: Readonly<TSESLint.RuleContext<MessageId, Options>>;\n  strategy?: string;\n  scopes?: string[];\n}\n\nexport const DefaultStrategy = 'logical';\n\nexport const Strategies = new Map<string, StrategyClass<ImportsStrategy>>([\n  ['logical', LogicalStrategy]\n]);\n\nexport function extractChunks(\n  program: TSESTree.Program\n): Array<Chunk<TSESTree.ImportDeclaration>> {\n  const chunks: Array<Chunk<TSESTree.ImportDeclaration>> = [];\n  let currentChunk = [];\n\n  for (const node of program.body) {\n    if (node.type === TSESTree.AST_NODE_TYPES.ImportDeclaration) {\n      currentChunk.push(node);\n    } else if (currentChunk.length) {\n      chunks.push(currentChunk);\n      currentChunk = [];\n    }\n  }\n\n  if (currentChunk.length) {\n    chunks.push(currentChunk);\n  }\n\n  return chunks;\n}\n\nexport function inspect(\n  chunk: Chunk<TSESTree.ImportDeclaration>,\n  {\n    program,\n    context,\n    strategy: strategyName,\n    scopes\n  }: InspectImportOrderOptions\n): void {\n  if (!strategyName) {\n    throw new Error(\n      `Cannot find \"${strategyName}\" strategy, available strategies: ${[\n        ...Strategies.keys()\n      ].join(Punctuator.Semicolon)}.`\n    );\n  }\n\n  const StrategyClass = Strategies.get(strategyName);\n  if (!StrategyClass) {\n    throw new Error(\n      `No associated constructor associated with ${strategyName} strategy.`\n    );\n  }\n\n  const strategy = new StrategyClass({ scopes });\n  if (!strategy.renderImports || !strategy.sortIdentifiers) {\n    throw new Error(\n      `Strategy \"${strategyName}\" doesn't implement the ImportsStrategy interface.`\n    );\n  }\n\n  if (!chunk.length) {\n    return;\n  }\n\n  const sourceCode = context.getSourceCode();\n  const declarations = chunk.map(\n    (node, idx): AugmentedImportDeclaration =>\n      new AugmentedImportDeclaration({\n        node,\n        idx,\n        sourceCode,\n        chunk,\n        strategy\n      })\n  );\n\n  let [start] = chunk[0].range;\n  let [, end] = (chunk.at(-1) as TSESTree.ImportDeclaration).range;\n\n  for (const comment of program.comments ?? []) {\n    const [cstart, cend] = comment.range;\n    switch (comment.type) {\n      case TSESTree.AST_TOKEN_TYPES.Block:\n        if (\n          comment.loc.start.line ===\n          (chunk.at(-1) as TSESTree.ImportDeclaration).loc.start.line\n        ) {\n          start = cstart < start ? cstart : start;\n        }\n\n        if (\n          comment.loc.end.line === comment.loc.start.line &&\n          comment.loc.end.line ===\n            (chunk.at(-1) as TSESTree.ImportDeclaration).loc.end.line\n        ) {\n          end = cend > end ? cend : end;\n        }\n        break;\n\n      case TSESTree.AST_TOKEN_TYPES.Line:\n        if (\n          comment.loc.end.line !==\n          (chunk.at(-1) as TSESTree.ImportDeclaration).loc.end.line\n        ) {\n          continue;\n        }\n        end = cend > end ? cend : end;\n        break;\n    }\n  }\n\n  const sorted = strategy.renderImports(declarations);\n\n  if (sourceCode.getText().slice(start, end) === sorted) {\n    return;\n  }\n\n  context.report({\n    messageId: 'imports',\n    loc: {\n      start: sourceCode.getLocFromIndex(start),\n      end: sourceCode.getLocFromIndex(end)\n    },\n    fix: fixer => fixer.replaceTextRange([start, end], sorted)\n  });\n}\n\nexport default createRule<Options, MessageId>({\n  name: 'imports',\n  meta: {\n    type: 'layout',\n    docs: {\n      description: 'Enforces a consistent imports order.',\n      recommended: false\n    },\n    fixable: 'code',\n    schema: {\n      type: 'array',\n      definitions: {\n        strategy: {\n          enum: [...Strategies.keys()]\n        }\n      },\n      items: [\n        {\n          type: 'object',\n          additionalProperties: false,\n          properties: {\n            strategy: {\n              description: `Strategy used to sort imports (available: ${[\n                ...Strategies.keys()\n              ].join(',')}).`,\n              oneOf: [{ $ref: '#/definitions/strategy' }, { type: 'object' }]\n            },\n            scopes: {}\n          }\n        }\n      ]\n    },\n    messages: {\n      imports: `Import order is inconsistent (use --fix to re-order).`\n    }\n  },\n  defaultOptions: [\n    {\n      strategy: DefaultStrategy,\n      scopes: []\n    }\n  ],\n  create(\n    context: Readonly<TSESLint.RuleContext<MessageId, Options>>,\n    [options]: Readonly<Options>\n  ): TSESLint.RuleListener {\n    return {\n      Program: (program: TSESTree.Program): void => {\n        for (const chunk of extractChunks(program)) {\n          inspect(chunk, { program, context, ...options });\n        }\n      }\n    };\n  }\n});\n","import imports from './imports.rule';\n\nexport default {\n  imports\n};\n","import rules from './rules';\n\nexport default {\n  rules\n};\n"],"names":["TSESTree","ESLintUtils"],"mappings":";;;;AAIA,IAAY,UA6DX,CAAA;AA7DD,CAAA,UAAY,UAAU,EAAA;AACpB,IAAA,UAAA,CAAA,WAAA,CAAA,GAAA,GAAe,CAAA;AACf,IAAA,UAAA,CAAA,YAAA,CAAA,GAAA,GAAgB,CAAA;AAChB,IAAA,UAAA,CAAA,WAAA,CAAA,GAAA,GAAe,CAAA;AACf,IAAA,UAAA,CAAA,YAAA,CAAA,GAAA,GAAgB,CAAA;AAChB,IAAA,UAAA,CAAA,aAAA,CAAA,GAAA,GAAiB,CAAA;AACjB,IAAA,UAAA,CAAA,cAAA,CAAA,GAAA,GAAkB,CAAA;AAClB,IAAA,UAAA,CAAA,KAAA,CAAA,GAAA,GAAS,CAAA;AACT,IAAA,UAAA,CAAA,WAAA,CAAA,GAAA,KAAiB,CAAA;AACjB,IAAA,UAAA,CAAA,WAAA,CAAA,GAAA,GAAe,CAAA;AACf,IAAA,UAAA,CAAA,OAAA,CAAA,GAAA,GAAW,CAAA;AACX,IAAA,UAAA,CAAA,aAAA,CAAA,GAAA,IAAkB,CAAA;AAClB,IAAA,UAAA,CAAA,UAAA,CAAA,GAAA,GAAc,CAAA;AACd,IAAA,UAAA,CAAA,eAAA,CAAA,GAAA,IAAoB,CAAA;AACpB,IAAA,UAAA,CAAA,aAAA,CAAA,GAAA,GAAiB,CAAA;AACjB,IAAA,UAAA,CAAA,gBAAA,CAAA,GAAA,IAAqB,CAAA;AACrB,IAAA,UAAA,CAAA,mBAAA,CAAA,GAAA,IAAwB,CAAA;AACxB,IAAA,UAAA,CAAA,cAAA,CAAA,GAAA,IAAmB,CAAA;AACnB,IAAA,UAAA,CAAA,mBAAA,CAAA,GAAA,IAAwB,CAAA;AACxB,IAAA,UAAA,CAAA,oBAAA,CAAA,GAAA,KAA0B,CAAA;AAC1B,IAAA,UAAA,CAAA,yBAAA,CAAA,GAAA,KAA+B,CAAA;AAC/B,IAAA,UAAA,CAAA,mBAAA,CAAA,GAAA,IAAwB,CAAA;AACxB,IAAA,UAAA,CAAA,MAAA,CAAA,GAAA,GAAU,CAAA;AACV,IAAA,UAAA,CAAA,OAAA,CAAA,GAAA,GAAW,CAAA;AACX,IAAA,UAAA,CAAA,UAAA,CAAA,GAAA,GAAc,CAAA;AACd,IAAA,UAAA,CAAA,kBAAA,CAAA,GAAA,IAAuB,CAAA;AACvB,IAAA,UAAA,CAAA,OAAA,CAAA,GAAA,GAAW,CAAA;AACX,IAAA,UAAA,CAAA,SAAA,CAAA,GAAA,GAAa,CAAA;AACb,IAAA,UAAA,CAAA,UAAA,CAAA,GAAA,IAAe,CAAA;AACf,IAAA,UAAA,CAAA,YAAA,CAAA,GAAA,IAAiB,CAAA;AACjB,IAAA,UAAA,CAAA,kBAAA,CAAA,GAAA,IAAuB,CAAA;AACvB,IAAA,UAAA,CAAA,wBAAA,CAAA,GAAA,IAA6B,CAAA;AAC7B,IAAA,UAAA,CAAA,mCAAA,CAAA,GAAA,KAAyC,CAAA;AACzC,IAAA,UAAA,CAAA,WAAA,CAAA,GAAA,GAAe,CAAA;AACf,IAAA,UAAA,CAAA,KAAA,CAAA,GAAA,GAAS,CAAA;AACT,IAAA,UAAA,CAAA,OAAA,CAAA,GAAA,GAAW,CAAA;AACX,IAAA,UAAA,CAAA,aAAA,CAAA,GAAA,GAAiB,CAAA;AACjB,IAAA,UAAA,CAAA,OAAA,CAAA,GAAA,GAAW,CAAA;AACX,IAAA,UAAA,CAAA,oBAAA,CAAA,GAAA,IAAyB,CAAA;AACzB,IAAA,UAAA,CAAA,QAAA,CAAA,GAAA,IAAa,CAAA;AACb,IAAA,UAAA,CAAA,UAAA,CAAA,GAAA,GAAc,CAAA;AACd,IAAA,UAAA,CAAA,OAAA,CAAA,GAAA,IAAY,CAAA;AACZ,IAAA,UAAA,CAAA,IAAA,CAAA,GAAA,GAAQ,CAAA;AACR,IAAA,UAAA,CAAA,kBAAA,CAAA,GAAA,IAAuB,CAAA;AACvB,IAAA,UAAA,CAAA,UAAA,CAAA,GAAA,GAAc,CAAA;AACd,IAAA,UAAA,CAAA,QAAA,CAAA,GAAA,GAAY,CAAA;AACZ,IAAA,UAAA,CAAA,YAAA,CAAA,GAAA,IAAiB,CAAA;AACjB,IAAA,UAAA,CAAA,aAAA,CAAA,GAAA,IAAkB,CAAA;AAClB,IAAA,UAAA,CAAA,gBAAA,CAAA,GAAA,IAAqB,CAAA;AACrB,IAAA,UAAA,CAAA,wBAAA,CAAA,GAAA,KAA8B,CAAA;AAC9B,IAAA,UAAA,CAAA,aAAA,CAAA,GAAA,IAAkB,CAAA;AAClB,IAAA,UAAA,CAAA,eAAA,CAAA,GAAA,IAAoB,CAAA;AACpB,IAAA,UAAA,CAAA,wBAAA,CAAA,GAAA,KAA8B,CAAA;AAC9B,IAAA,UAAA,CAAA,8BAAA,CAAA,GAAA,KAAoC,CAAA;AACpC,IAAA,UAAA,CAAA,yCAAA,CAAA,GAAA,MAAgD,CAAA;AAChD,IAAA,UAAA,CAAA,iBAAA,CAAA,GAAA,IAAsB,CAAA;AACtB,IAAA,UAAA,CAAA,WAAA,CAAA,GAAA,IAAgB,CAAA;AAChB,IAAA,UAAA,CAAA,cAAA,CAAA,GAAA,KAAoB,CAAA;AACpB,IAAA,UAAA,CAAA,0BAAA,CAAA,GAAA,KAAgC,CAAA;AAChC,IAAA,UAAA,CAAA,wBAAA,CAAA,GAAA,KAA8B,CAAA;AAC9B,IAAA,UAAA,CAAA,aAAA,CAAA,GAAA,IAAkB,CAAA;AACpB,CAAC,EA7DW,UAAU,KAAV,UAAU,GA6DrB,EAAA,CAAA,CAAA,CAAA;AAED,IAAY,SAOX,CAAA;AAPD,CAAA,UAAY,SAAS,EAAA;AACnB,IAAA,SAAA,CAAA,OAAA,CAAA,GAAA,EAAU,CAAA;AACV,IAAA,SAAA,CAAA,UAAA,CAAA,GAAA,IAAe,CAAA;AACf,IAAA,SAAA,CAAA,SAAA,CAAA,GAAA,IAAc,CAAA;AACd,IAAA,SAAA,CAAA,KAAA,CAAA,GAAA,IAAU,CAAA;AACV,IAAA,SAAA,CAAA,aAAA,CAAA,GAAA,IAAkB,CAAA;AAClB,IAAA,SAAA,CAAA,OAAA,CAAA,GAAA,GAAW,CAAA;AACb,CAAC,EAPW,SAAS,KAAT,SAAS,GAOpB,EAAA,CAAA,CAAA,CAAA;AAED,IAAY,MAUX,CAAA;AAVD,CAAA,UAAY,MAAM,EAAA;AAChB,IAAA,MAAA,CAAA,OAAA,CAAA,GAAA,OAAe,CAAA;AACf,IAAA,MAAA,CAAA,OAAA,CAAA,GAAA,OAAe,CAAA;AACf,IAAA,MAAA,CAAA,UAAA,CAAA,GAAA,UAAqB,CAAA;AACrB,IAAA,MAAA,CAAA,SAAA,CAAA,GAAA,SAAmB,CAAA;AACnB,IAAA,MAAA,CAAA,SAAA,CAAA,GAAA,SAAmB,CAAA;AACnB,IAAA,MAAA,CAAA,OAAA,CAAA,GAAA,OAAe,CAAA;AACf,IAAA,MAAA,CAAA,WAAA,CAAA,GAAA,WAAuB,CAAA;AACvB,IAAA,MAAA,CAAA,KAAA,CAAA,GAAA,KAAW,CAAA;AACX,IAAA,MAAA,CAAA,aAAA,CAAA,GAAA,aAA2B,CAAA;AAC7B,CAAC,EAVW,MAAM,KAAN,MAAM,GAUjB,EAAA,CAAA,CAAA,CAAA;AAEM,MAAM,QAAQ,GAAG;AACtB,IAAA,OAAO,EAAE,4BAA4B;AACrC,IAAA,KAAK,EAAE,SAAS;CACjB;;ACvFD,IAAY,iBAGX,CAAA;AAHD,CAAA,UAAY,iBAAiB,EAAA;AAC3B,IAAA,iBAAA,CAAA,QAAA,CAAA,GAAA,QAAiB,CAAA;AACjB,IAAA,iBAAA,CAAA,OAAA,CAAA,GAAA,OAAe,CAAA;AACjB,CAAC,EAHW,iBAAiB,KAAjB,iBAAiB,GAG5B,EAAA,CAAA,CAAA,CAAA;MAEY,SAAS,CAAA;AACb,IAAA,QAAQ,GAAkC,iBAAiB,CAAC,MAAM,CAAC;IAEnE,MAAM,GAAwC,EAAE,CAAC;IAEjD,KAAK,GAAwC,EAAE,CAAC;IAEhD,MAAM,GAAwC,EAAE,CAAC;AAEjD,IAAA,IAAI,CAA2B;IAE/B,QAAQ,GAAG,KAAK,CAAC;AACzB;;ACrBD;AACgB,SAAA,aAAa,CAC3B,KAAe,EACf,UAAiE,EAAA;AAEjE,IAAA,KAAK,IAAI,GAAG,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE;QAChD,IAAI,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC;AAAE,YAAA,OAAO,GAAG,CAAC;AACpD,KAAA;IACD,OAAO,CAAC,CAAC,CAAC;AACZ;;ACaM,SAAU,cAAc,CAAqC,EACjE,IAAI,EACJ,GAAG,EACH,KAAK,EACoB,EAAA;IACzB,IAAI,GAAG,KAAK,CAAC;QAAE,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC;AAC9C,IAAA,OAAO,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC;AACrC,CAAC;AAEK,SAAU,oBAAoB,CAAC,EACnC,IAAI,EACJ,GAAG,EACH,UAAU,EACV,QAAQ,EACoB,EAAA;AAC5B,IAAA,OAAO,UAAU;SACd,iBAAiB,CAAC,IAAI,CAAC;AACvB,SAAA,MAAM,CAAC,CAAC,OAAyB,KAAI;AACpC,QAAA,QACE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI;AAC7C,YAAA,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,QAAQ;AAC/B,aAAC,GAAG,GAAG,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,QAAQ,CAAC,EAC9C;AACJ,KAAC,CAAC,CAAC;AACP,CAAC;SAEe,mBAAmB,CAAC,EAClC,IAAI,EACJ,UAAU,EACe,EAAA;AACzB,IAAA,OAAO,UAAU;SACd,gBAAgB,CAAC,IAAI,CAAC;SACtB,MAAM,CACL,CAAC,OAAyB,KAAK,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAC1E,CAAC;AACN,CAAC;SAEe,iBAAiB,CAAC,EAChC,IAAI,EACJ,UAAU,EACe,EAAA;AACzB,IAAA,MAAM,WAAW,GAAG,UAAU,CAAC,cAAc,CAAC,IAAI,EAAE;AAClD,QAAA,eAAe,EAAE,IAAI;AACtB,KAAA,CAAC,CAAC;AACH,IAAA,MAAM,KAAK,GAAG,UAAU,CAAC,IAAI;SAC1B,KAAK,CAAC,WAAW,KAAK,IAAI,GAAG,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACrE,SAAA,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAE3B,IAAI,WAAW,KAAK,IAAI;AAAE,QAAA,OAAO,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAW,CAAC;IACxD,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,GAAI,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAY,GAAG,SAAS,CAAC,KAAK,CAAC;AACvE,CAAC;AAQK,SAAU,mBAAmB,CACjC,MAA2C,EAAA;AAE3C,IAAA,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,CAAC,KAAK,CAAC,CAAC;IACrE,IAAI,CAAC,QAAQ,CAAC,MAAM;AAAE,QAAA,OAAO,KAAK,CAAC;AACnC,IAAA,MAAM,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;IAE9B,QACE,UAAU,CAAC,IAAI,KAAKA,0BAAQ,CAAC,eAAe,CAAC,IAAI;SAChD,UAAU,CAAC,IAAI,KAAKA,0BAAQ,CAAC,eAAe,CAAC,KAAK;YACjD,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAC1C;AACJ;;ACjFO,MAAM,iBAAiB,GAAG,CAAC,CAAC;AAE7B,SAAU,cAAc,CAAC,GAAW,EAAA;IACxC,IAAI,UAAU,GAAG,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAE7C,UAAU;QACR,UAAU,CAAC,MAAM,IAAI,iBAAiB;AACpC,cAAE,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;cACnD,UAAU,CAAC;AAEjB,IAAA,OAAO,UAAU;AACd,SAAA,GAAG,CAAC,CAAC,KAAa,KAAiB;AAClC,QAAA,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;AACtB,YAAA,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,CAAC,KAAK,EAAE,CAAC;AACvD,SAAA;aAAM,IAAI,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;AACvC,YAAA,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,OAAO,EAAE,KAAK,EAAE,SAAS,CAAC,OAAO,EAAE,CAAC;AAC3D,SAAA;AAAM,aAAA,IAAI,KAAK,KAAK,UAAU,CAAC,KAAK,EAAE;YACrC,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC;AACtC,SAAA;aAAM,IAAI,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YACrC,OAAO;gBACL,IAAI,EAAE,MAAM,CAAC,KAAK;gBAClB,KAAK;gBACL,UAAU,EAAE,KAAK,CAAC,MAAM;aACzB,CAAC;AACH,SAAA;QACD,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC;AACzC,KAAC,CAAC;SACD,MAAM,CACL,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,CAAC,OAAO,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,CAAC,KAAK,CACtE,CAAC;AACN,CAAC;SAEe,QAAQ,CAAC,EACvB,IAAI,EACJ,UAAU,EACe,EAAA;AACzB,IAAA,OAAO,UAAU;SACd,SAAS,CAAC,IAAI,CAAC;SACf,OAAO,CACN,CAAC,KAAqB,EAAE,GAAW,EAAE,MAA6B,KAAI;AACpE,QAAA,IAAI,GAAG,KAAK,MAAM,CAAC,MAAM,GAAG,CAAC;YAAE,OAAO,CAAC,KAAK,CAAC,CAAC;QAE9C,MAAM,QAAQ,GAAG,UAAU,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QACpD,MAAM,IAAI,GACR,QAAQ,CAAC,MAAM,GAAG,CAAC,GAAI,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAsB,GAAG,KAAK,CAAC;QACtE,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;QAElC,OAAO;YACL,KAAK;YACL,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAyB,EAAE,IAAY,KAAI;AAC9D,gBAAA,MAAM,OAAO,GAAG,IAAI,KAAK,CAAC,GAAG,KAAK,GAAG,QAAQ,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;gBACxD,OAAO;oBACL,GAAG,cAAc,CACf,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAC1D;AACD,oBAAA;AACE,wBAAA,GAAG,OAAO;wBACV,KAAK,EAAE,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACjE,qBAAA;iBACF,CAAC;AACJ,aAAC,CAAC;YACF,GAAG,cAAc,CACf,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CACzD;SACF,CAAC;AACJ,KAAC,CACF,CAAC;AACN;;ACzEA,IAAY,eAGX,CAAA;AAHD,CAAA,UAAY,eAAe,EAAA;AACzB,IAAA,eAAA,CAAA,QAAA,CAAA,GAAA,QAAiB,CAAA;AACjB,IAAA,eAAA,CAAA,OAAA,CAAA,GAAA,OAAe,CAAA;AACjB,CAAC,EAHW,eAAe,KAAf,eAAe,GAG1B,EAAA,CAAA,CAAA,CAAA;AAcK,SAAU,aAAa,CAAC,EAC5B,OAAO,EACP,UAAU,EACV,MAAM,EACN,QAAQ,EACa,EAAA;IACrB,MAAM,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACvE,IAAA,OAAO,QAAQ,KAAK,eAAe,CAAC,MAAM;UACtC,IAAI,CAAC,MAAM,CACT,cAAc,CAAC,MAAM,CAAC;aACnB,GAAG,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC;AACzB,aAAA,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CACzB;AACH,UAAE,cAAc,CAAC,MAAM,CAAC;aACnB,GAAG,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC;AACzB,aAAA,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;aACrB,MAAM,CAAC,IAAI,CAAC,CAAC;AACtB,CAAC;AAEK,SAAU,cAAc,CAAC,EAC7B,IAAI,EACJ,UAAU,EACV,QAAQ,EACR,QAAQ,EACc,EAAA;AACtB,IAAA,OAAO,QAAQ;AACZ,SAAA,GAAG,CAAC,CAAC,OAAyB,EAAE,GAAW,KAAI;AAC9C,QAAA,IAAI,MAAc,CAAC;AACnB,QAAA,QAAQ,QAAQ;YACd,KAAK,eAAe,CAAC,MAAM;AACzB,gBAAA,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAC5B,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAChB,CAAC,GAAG,KAAK,QAAQ,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,GAAG,QAAQ,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAClE,CAAC;gBACF,MAAM;AACR,YAAA;AACE,gBAAA,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAC5B,CAAC,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,QAAQ,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAC/C,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CACjB,CAAC;gBACF,MAAM;AACT,SAAA;AACD,QAAA,OAAO,aAAa,CAAC,EAAE,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC;AAClE,KAAC,CAAC;AACD,SAAA,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AAC3B;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACa,0BAA0B,CAAA;AAoBnB,IAAA,OAAA,CAAA;AAnBR,IAAA,gBAAgB,CAAoB;AAEpC,IAAA,iBAAiB,CAAmC;AAEpD,IAAA,MAAM,CAAU;AAEhB,IAAA,OAAO,CAAuC;AAE9C,IAAA,sBAAsB,CAAuC;AAE7D,IAAA,gBAAgB,GAAoB;AAC5C,QAAA,MAAM,EAAE,EAAE;AACV,QAAA,KAAK,EAAE,EAAE;AACT,QAAA,WAAW,EAAE,EAAE;KAChB,CAAC;AAEQ,IAAA,SAAS,CAAkB;AAErC,IAAA,WAAA,CACkB,OAA0C,EAAA;QAA1C,IAAO,CAAA,OAAA,GAAP,OAAO,CAAmC;KACxD;AAEJ,IAAA,IAAW,IAAI,GAAA;AACb,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;KAC1B;AAED,IAAA,IAAW,UAAU,GAAA;AACnB,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;KAChC;AAED,IAAA,IAAW,GAAG,GAAA;AACZ,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;KACzB;AAED,IAAA,IAAW,MAAM,GAAA;AACf,QAAA,QACE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK;AACrB,YAAA,IAAI,CAAC,IAAI,CAAC,MAA6C,CAAC,IAAI,EAC7D;KACH;AAED,IAAA,IAAW,QAAQ,GAAA;AACjB,QAAA,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,UAAU,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC;AACtD,QAAA,QAAQ,IAAI,CAAC,SAAS,KAAK;YACzB,cAAc,EAAE,oBAAoB,CAAC;gBACnC,IAAI;gBACJ,GAAG;gBACH,UAAU;gBACV,QAAQ,EAAE,cAAc,CAAC;oBACvB,IAAI;oBACJ,GAAG;oBACH,KAAK;iBACN,CAAC;aACH,CAAC;YACF,aAAa,EAAE,mBAAmB,CAAC;gBACjC,IAAI;gBACJ,UAAU;aACX,CAAC;YACF,WAAW,EAAE,iBAAiB,CAAC;gBAC7B,IAAI;gBACJ,UAAU;aACX,CAAC;AACH,SAAA,EAAE;KACJ;AAED,IAAA,IAAW,MAAM,GAAA;AACf,QAAA,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC;AAClC,QAAA,QAAQ,IAAI,CAAC,OAAO,KAAK,QAAQ,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,EAAE;KAC1D;AAED,IAAA,IAAW,aAAa,GAAA;AACtB,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;KAC7B;AAED,IAAA,IAAW,gBAAgB,GAAA;QACzB,QAAQ,IAAI,CAAC,iBAAiB,KAAK,IAAI,CAAC,aAAa,CAAC,MAAM,CAC1D,MAAM,IAAI,MAAM,CAAC,IAAI,KAAKA,0BAAQ,CAAC,cAAc,CAAC,eAAe,CAC/B,EAAE;KACvC;AAED,IAAA,IAAW,eAAe,GAAA;AACxB,QAAA,QAAQ,IAAI,CAAC,gBAAgB,KAAK;AAChC,YAAA,IAAI,CAAC,MAAM,CAAC,SAAS,CACnB,KAAK,IACH,KAAK,CAAC,IAAI,KAAKA,0BAAQ,CAAC,eAAe,CAAC,UAAU;AAClD,gBAAA,KAAK,CAAC,KAAK,KAAK,UAAU,CAAC,SAAS,CACvC;AACD,YAAA,IAAI,CAAC,MAAM,CAAC,SAAS,CACnB,KAAK,IACH,KAAK,CAAC,IAAI,KAAKA,0BAAQ,CAAC,eAAe,CAAC,UAAU;AAClD,gBAAA,KAAK,CAAC,KAAK,KAAK,UAAU,CAAC,UAAU,CACxC;AACF,SAAA,EAAE;KACJ;AAED,IAAA,IAAW,qBAAqB,GAAA;QAC9B,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CACtB,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,GAAG,CAAC,EAC3B,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CACxB,CAAC;KACH;AAED,IAAA,IAAW,eAAe,GAAA;AACxB,QAAA,IAAI,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,MAAM,EAAE;YAC5C,OAAO,IAAI,CAAC,gBAAgB,CAAC;AAC9B,SAAA;AAED,QAAA,IAAI,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;AAChC,QAAA,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,KAAK,IAAG;YACzC,QAAQ,SAAS,CAAC,QAAQ;gBACxB,KAAK,iBAAiB,CAAC,MAAM;oBAC3B,SAAS,GAAG,IAAI,CAAC,sBAAsB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;oBAC1D,MAAM;gBAER,KAAK,iBAAiB,CAAC,KAAK;oBAC1B,SAAS,GAAG,IAAI,CAAC,qBAAqB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;oBACzD,MAAM;AAER,gBAAA;AACE,oBAAA,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;AAC3C,aAAA;AACH,SAAC,CAAC,CAAC;AAEH,QAAA,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;AACpC,QAAA,IAAI,CAAC,gBAAgB,CAAC,WAAW,GAAG,IAAI,CAAC,qBAAqB,CAC5D,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAClC,CAAC;QAEF,OAAO,IAAI,CAAC,gBAAgB,CAAC;KAC9B;IAEM,aAAa,GAAA;QAClB,QACE,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,gBAAgB,CAAC,MAAM,IAAI,CAAC,EACvE;KACH;IAEM,YAAY,GAAA;AACjB,QAAA,QACE,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM;AAC1B,aAAC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,IAAI,CAAC,UAAU,KAAK,OAAO,CAAC;AAC3D,YAAA,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK;gBAC1D,UAAU,CAAC,SAAS,EACtB;KACH;IAEM,YAAY,GAAA;AACjB,QAAA,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAEtD,MAAM,YAAY,GAChB,SAAS;AACT,YAAA,SAAS,CAAC,IAAI,KAAKA,0BAAQ,CAAC,eAAe,CAAC,UAAU;AACtD,YAAA,SAAS,CAAC,KAAK,KAAK,UAAU,CAAC,SAAS,CAAC;QAE3C,MAAM,MAAM,GAAG,YAAY;cACvB,IAAI,CAAC,MAAM;AACb,cAAE;gBACE,GAAG,IAAI,CAAC,MAAM;gBACd,EAAE,IAAI,EAAE,MAAM,CAAC,SAAS,EAAE,KAAK,EAAE,UAAU,CAAC,SAAS,EAAE;aACxD,CAAC;AAEN,QAAA,OAAO,MAAM,CAAC,GAAG,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;KAC/D;IAEM,UAAU,GAAA;AACf,QAAA,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;AAAE,YAAA,OAAO,IAAI,CAAC,YAAY,EAAE,CAAC;QAEtD,MAAM,kBAAkB,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CACvD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAmB,CACvD,CAAC;QAEF,MAAM,gBAAgB,GACpB,kBAAkB,EAAE,IAAI,KAAKA,0BAAQ,CAAC,eAAe,CAAC,UAAU;AAChE,YAAA,kBAAkB,CAAC,KAAK,KAAK,UAAU,CAAC,KAAK,CAAC;AAEhD,QAAA,MAAM,EACJ,WAAW,EACX,MAAM,EAAE,iBAAiB,EACzB,KAAK,EAAE,gBAAgB,EACxB,GAAG,IAAI,CAAC,eAAe,CAAC;AAEzB,QAAA,MAAM,iBAAiB,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ;aAC5C,eAAe,CAAC,WAAW,CAAC;aAC5B,OAAO,CAAC,CAAC,UAAU,EAAE,GAAG,EAAE,KAAK,KAAI;YAClC,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;YAEhC,MAAM,WAAW,GACf,QAAQ;AACR,gBAAA,mBAAmB,CAAC,UAAU,CAAC,MAAM,CAAC;AACtC,gBAAA,EACE,QAAQ,CAAC,KAAK,CAAC,MAAM;AACrB,oBAAA,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,KAAK,MAAM,CAAC,OAAO,CAClE;AACC,kBAAE,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,OAAO,EAAE,KAAK,EAAE,SAAS,CAAC,OAAO,EAAE,CAAC;kBACpD,EAAE,CAAC;AAET,YAAA,IACE,WAAW,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,KAAK,UAAU,CAAC,KAAK,CAAC;gBACpD,mBAAmB,CAAC,iBAAiB,CAAC,EACtC;AACA,gBAAA,WAAW,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,OAAO,EAAE,KAAK,EAAE,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC;AACtE,aAAA;AAED,YAAA,IAAI,KAAK,GAAG,mBAAmB,CAAC,iBAAiB,CAAC;kBAC9C,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,CAAC,IAAI,KAAK,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM;sBAC5D,UAAU,CAAC,KAAK;AAClB,sBAAE,EAAE;AACN,kBAAE,UAAU,CAAC,KAAK,CAAC;YAErB,IAAI,UAAU,CAAC,QAAQ,EAAE;gBACvB,MAAM,iBAAiB,GAAG,CAAC,KAAmC,KAC5D,KAAK,CAAC,IAAI,KAAK,MAAM,CAAC,OAAO,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,CAAC,KAAK,CAAC;gBAC/D,IAAI,gBAAgB,GAClB,GAAG,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,gBAAgB;sBACtC,CAAC,CAAC;AACJ,sBAAE,KAAK,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;AACzC,gBAAA,gBAAgB,GAAG,gBAAgB,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,gBAAgB,CAAC;gBAClE,MAAM,eAAe,GAAG,aAAa,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAAC;AAEhE,gBAAA,IAAI,eAAe,KAAK,CAAC,CAAC,EAAE;AAC1B,oBAAA,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;AACvC,iBAAA;AAAM,qBAAA,IACL,KAAK;AACF,qBAAA,KAAK,CAAC,eAAe,GAAG,CAAC,CAAC;AAC1B,qBAAA,MAAM,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,EACtD;AACA,oBAAA,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;AACvC,iBAAA;AAAM,qBAAA;oBACL,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,gBAAgB,EAAE,eAAe,GAAG,CAAC,CAAC,CAAC;AAC5D,iBAAA;AACF,aAAA;YAED,OAAO;AACL,gBAAA,GAAG,WAAW;gBACd,GAAG,UAAU,CAAC,MAAM;gBACpB,GAAG,UAAU,CAAC,MAAM;gBACpB,IAAI,GAAG,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,gBAAgB;AAC5C,sBAAE,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,EAAE,KAAK,EAAE,UAAU,CAAC,KAAK,EAAE,CAAC;sBACjD,EAAE,CAAC;AACP,gBAAA,GAAG,KAAK;aACT,CAAC;AACJ,SAAC,CAAC,CAAC;AAEL,QAAA,MAAM,MAAM,GAAG;AACb,YAAA,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACpD,YAAA,GAAG,iBAAiB;AACpB,YAAA,GAAG,iBAAiB;AACpB,YAAA,IAAI,mBAAmB,CAAC,gBAAgB,CAAC;AACzC,gBAAA,iBAAiB,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,KAAK,MAAM,CAAC,OAAO;AACrE,kBAAE,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,OAAO,EAAE,KAAK,EAAE,SAAS,CAAC,OAAO,EAAE,CAAC;kBACpD,EAAE,CAAC;AACP,YAAA,GAAG,gBAAgB;AACnB,YAAA,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;SAC9C,CAAC;QAEF,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC5C,MAAM,YAAY,GAChB,SAAS,CAAC,IAAI,KAAKA,0BAAQ,CAAC,eAAe,CAAC,UAAU;AACtD,YAAA,SAAS,CAAC,KAAK,KAAK,UAAU,CAAC,SAAS,CAAC;QAE3C,IAAI,CAAC,YAAY,EAAE;YACjB,MAAM,CAAC,IAAI,CAAC;gBACV,IAAI,EAAE,MAAM,CAAC,SAAS;gBACtB,KAAK,EAAE,UAAU,CAAC,SAAS;AAC5B,aAAA,CAAC,CAAC;AACJ,SAAA;AAED,QAAA,OAAO,MAAM,CAAC,GAAG,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;KAC/D;IAEM,QAAQ,GAAA;AACb,QAAA,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC;AAClC,QAAA,MAAM,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;AAEtC,QAAA,QAAQ,IAAI,CAAC,MAAM,KAAK,MAAM,EAAE,CAAC,MAAM,CACrC,WAAW,EACX,cAAc,CAAC;YACb,IAAI;YACJ,UAAU;AACV,YAAA,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,cAAc;YACtC,QAAQ,EAAE,eAAe,CAAC,MAAM;AACjC,SAAA,CAAC,EACF,IAAI,CAAC,UAAU,EAAE,EACjB,cAAc,CAAC;YACb,IAAI;YACJ,UAAU;AACV,YAAA,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,aAAa;YACrC,QAAQ,EAAE,eAAe,CAAC,KAAK;SAChC,CAAC,CACH,EAAE;KACJ;IAES,sBAAsB,CAC9B,SAAoB,EACpB,KAAmC,EAAA;QAEnC,QAAQ,KAAK,CAAC,IAAI;YAChB,KAAK,MAAM,CAAC,OAAO;AACjB,gBAAA,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC7B,gBAAA,IACE,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,MAAM;AACpC,oBAAA,CAAC,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,MAAM,EACzC;oBACA,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;AAChD,oBAAA,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;AAC7B,iBAAA;gBACD,MAAM;YAER,KAAK,MAAM,CAAC,KAAK,CAAC;AAClB,YAAA,KAAKA,0BAAQ,CAAC,eAAe,CAAC,KAAK,CAAC;AACpC,YAAA,KAAKA,0BAAQ,CAAC,eAAe,CAAC,IAAI;AAChC,gBAAA,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC7B,MAAM;AAER,YAAA,KAAKA,0BAAQ,CAAC,eAAe,CAAC,UAAU;AACtC,gBAAA,IACE,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,MAAM;AACpC,oBAAA,CAAC,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,MAAM,EACzC;oBACA,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;AAChD,oBAAA,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;AAC7B,iBAAA;AACD,gBAAA,SAAS,CAAC,QAAQ,GAAG,SAAS,CAAC;AAC/B,gBAAA,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAChC,SAAA;AAED,QAAA,OAAO,SAAS,CAAC;KAClB;IAES,qBAAqB,CAC7B,SAAoB,EACpB,KAAmC,EAAA;QAEnC,QAAQ,KAAK,CAAC,IAAI;YAChB,KAAK,MAAM,CAAC,OAAO;AACjB,gBAAA,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC5B,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAClD,gBAAA,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;gBAC5B,MAAM;YAER,KAAK,MAAM,CAAC,KAAK,CAAC;AAClB,YAAA,KAAKA,0BAAQ,CAAC,eAAe,CAAC,IAAI;AAChC,gBAAA,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC5B,MAAM;AAER,YAAA,KAAKA,0BAAQ,CAAC,eAAe,CAAC,KAAK;gBACjC,IAAI,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;oBACtC,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAClD,oBAAA,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;AAC5B,oBAAA,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC9B,iBAAA;AAAM,qBAAA;AACL,oBAAA,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC7B,iBAAA;gBACD,MAAM;AAER,YAAA,KAAKA,0BAAQ,CAAC,eAAe,CAAC,UAAU;gBACtC,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAClD,gBAAA,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;AAC5B,gBAAA,SAAS,CAAC,QAAQ,GAAG,SAAS,CAAC;AAC/B,gBAAA,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC7B,MAAM;AACT,SAAA;AAED,QAAA,OAAO,SAAS,CAAC;KAClB;IAES,gBAAgB,CACxB,SAAoB,EACpB,KAAmC,EAAA;QAEnC,QAAQ,KAAK,CAAC,IAAI;AAChB,YAAA,KAAKA,0BAAQ,CAAC,eAAe,CAAC,UAAU;AACtC,gBAAA,IAAI,KAAK,CAAC,KAAK,KAAK,UAAU,CAAC,KAAK,EAAE;AACpC,oBAAA,SAAS,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC1B,oBAAA,SAAS,CAAC,QAAQ,GAAG,iBAAiB,CAAC,KAAK,CAAC;AAC9C,iBAAA;gBACD,MAAM;AAER,YAAA;AACE,gBAAA,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAChC,SAAA;KACF;AAES,IAAA,mBAAmB,CAAC,SAAoB,EAAA;QAChD,QAAQ,SAAS,CAAC,QAAQ;YACxB,KAAK,iBAAiB,CAAC,MAAM;gBAC3B,IAAI,CAAC,gBAAgB,CAAC,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC;gBAC/C,MAAM;YAER,KAAK,iBAAiB,CAAC,KAAK;AAC1B,gBAAA,IAAI,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,KAAK,MAAM,CAAC,KAAK,EAAE;AACjD,oBAAA,IAAI,CAAC,gBAAgB,CAAC,KAAK,GAAG;AAC5B,wBAAA,SAAS,CAAC,KAAK,CAAC,GAAG,EAAkC;qBACtD,CAAC;AACH,iBAAA;gBACD,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAClD,MAAM;AAER,YAAA;gBACE,MAAM,iBAAiB,GAAG,aAAa,CACrC,SAAS,CAAC,MAAM,EAChB,KAAK,IACH,KAAK,CAAC,IAAI,KAAKA,0BAAQ,CAAC,eAAe,CAAC,UAAU;oBAClD,KAAK,CAAC,IAAI,KAAKA,0BAAQ,CAAC,eAAe,CAAC,OAAO,CAClD,CAAC;AAEF,gBAAA,MAAM,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,iBAAiB,GAAG,CAAC,CAAC,CAAC;AAChE,gBAAA,MAAM,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,iBAAiB,GAAG,CAAC,CAAC,CAAC;AAE5D,gBAAA,IAAI,UAAU,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,MAAM,CAAC,OAAO,CAAC,CAAC;gBAEjE,IAAI,UAAU,KAAK,CAAC,CAAC;oBAAE,UAAU,IAAI,CAAC,CAAC;AAEvC,gBAAA,MAAM,QAAQ,GAAG,KAAK,CAAC,SAAS,CAC9B,CAAC,IACC,CAAC,CAAC,IAAI,KAAKA,0BAAQ,CAAC,eAAe,CAAC,KAAK;oBACzC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CACjC,CAAC;AAEF,gBAAA,IAAI,QAAQ,GAAG,CAAC,CAAC,CAAC;AAElB,gBAAA,IAAI,UAAU,IAAI,CAAC,IAAI,QAAQ,IAAI,CAAC,EAAE;oBACpC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;AAC3C,iBAAA;qBAAM,IAAI,UAAU,IAAI,CAAC,EAAE;oBAC1B,QAAQ,GAAG,UAAU,CAAC;AACvB,iBAAA;qBAAM,IAAI,QAAQ,IAAI,CAAC,EAAE;oBACxB,QAAQ,GAAG,QAAQ,CAAC;AACrB,iBAAA;AAAM,qBAAA,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,KAAK,MAAM,CAAC,KAAK,EAAE;AAC9C,oBAAA,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC;AACzB,iBAAA;AAED,gBAAA,SAAS,CAAC,MAAM,GAAG,MAAM,CAAC;gBAC1B,SAAS,CAAC,KAAK,GAAG,QAAQ,KAAK,CAAC,CAAC,GAAG,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;gBACrE,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAClD,IAAI,CAAC,gBAAgB,CAAC,KAAK;AACzB,oBAAA,QAAQ,KAAK,CAAC,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AAClD,SAAA;KACF;AAES,IAAA,qBAAqB,CAC7B,WAA6B,EAAA;QAE7B,OAAO,WAAW,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,GAAG,KAAI;YACzC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;AAC7C,YAAA,OAAO,UAAU,CAAC;AACpB,SAAC,CAAC,CAAC;KACJ;AACF;;AC9fe,SAAA,aAAa,CAAC,CAAS,EAAE,CAAS,EAAA;IAChD,MAAM,MAAM,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;AACrC,QAAA,WAAW,EAAE,MAAM;AACnB,QAAA,OAAO,EAAE,IAAI;AACd,KAAA,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAEjB,IAAI,MAAM,KAAK,CAAC;AAAE,QAAA,OAAO,MAAM,CAAC;IAChC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AACtC;;ACDA;AACO,MAAM,OAAO,GAAG;IACrB,QAAQ;IACR,aAAa;IACb,QAAQ;IACR,eAAe;IACf,SAAS;IACT,SAAS;IACT,WAAW;IACX,QAAQ;IACR,OAAO;IACP,KAAK;IACL,QAAQ;IACR,QAAQ;IACR,IAAI;IACJ,MAAM;IACN,OAAO;IACP,OAAO;IACP,WAAW;IACX,QAAQ;IACR,KAAK;IACL,IAAI;IACJ,MAAM;IACN,YAAY;IACZ,SAAS;IACT,UAAU;IACV,aAAa;IACb,UAAU;IACV,MAAM;IACN,QAAQ;IACR,gBAAgB;IAChB,QAAQ;IACR,KAAK;IACL,cAAc;IACd,KAAK;IACL,KAAK;IACL,MAAM;IACN,IAAI;IACJ,IAAI;IACJ,MAAM;IACN,gBAAgB;IAChB,MAAM;CACP,CAAC;MAEW,eAAe,CAAA;AACG,IAAA,OAAA,CAAA;AAA7B,IAAA,WAAA,CAA6B,OAAwB,EAAA;QAAxB,IAAO,CAAA,OAAA,GAAP,OAAO,CAAiB;KAAI;AAEzD,IAAA,IAAW,MAAM,GAAA;AACf,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,EAAE,CAAC;KAClC;AAEM,IAAA,QAAQ,CAAC,MAAc,EAAA;QAC5B,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,IAAI,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KAC1E;AAEM,IAAA,aAAa,CAClB,YAA+C,EAAA;QAE/C,MAAM,QAAQ,GAAG,MAAM,CAAC,WAAW,CACjC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,CACtD,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,KAAI;YAChB,MAAM,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;AAC5C,YAAA,MAAM,eAAe,GACnB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,aAAa,CAAC,MAAM;AAC5C,gBAAA,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC;AAC/C,YAAA,MAAM,YAAY,GAAG,KAAK,CAAC,MAAM;AAC/B,kBAAE,MAAM;qBACH,GAAG,CAAC,WAAW,IAAI,WAAW,CAAC,QAAQ,EAAE,CAAC;AAC1C,qBAAA,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;AACvB,qBAAA,MAAM,CAAC,eAAe,GAAG,SAAS,CAAC,OAAO,GAAG,SAAS,CAAC,KAAK,CAAC;AAClE,kBAAE,SAAS,CAAC,KAAK,CAAC;AAEpB,YAAA,OAAO,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;SAC7B,CACF,CACF,CAAC;AAEF,QAAA,OAAO,MAAM,EAAE,CAAC,MAAM,CACpB,QAAQ,CAAC,OAAO,EAChB,QAAQ,CAAC,OAAO,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,CAAC,MAAM;cAC7C,SAAS,CAAC,OAAO;cACjB,SAAS,CAAC,KAAK,EACnB,QAAQ,CAAC,MAAM,EACf,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,CAAC,MAAM;YAChD,QAAQ,CAAC,KAAK,CAAC,MAAM;cACnB,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;cAC3B,SAAS,CAAC,KAAK,EACnB,QAAQ,CAAC,KAAK,CACf,CAAC;KACH;AAEM,IAAA,iBAAiB,CACtB,YAA+C,EAAA;AAE/C,QAAA,MAAM,MAAM,GAAsD;AAChE,YAAA,OAAO,EAAE,EAAE;AACX,YAAA,MAAM,EAAE,EAAE;AACV,YAAA,KAAK,EAAE,EAAE;SACV,CAAC;AAEF,QAAA,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE;AACtC,YAAA,QAAQ,WAAW,CAAC,IAAI,CAAC,UAAU;AACjC,gBAAA,KAAK,MAAM,CAAC;AACZ,gBAAA,KAAK,OAAO;oBACV,MAAM,MAAM,GAAG,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,KAAe,CAAC;AACvD,oBAAA,IAAI,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;AAC5B,wBAAA,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AAClC,qBAAA;yBAAM,IACL,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,UAAU,CAAC,GAAG;AACnC,wBAAA,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EACrB;AACA,wBAAA,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AAChC,qBAAA;AAAM,yBAAA;AACL,wBAAA,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AACjC,qBAAA;oBACD,MAAM;AACT,aAAA;AACF,SAAA;AAED,QAAA,OAAO,MAAM,CAAC;KACf;AAEM,IAAA,eAAe,CAAC,WAA6B,EAAA;AAClD,QAAA,OAAO,WAAW;AACf,aAAA,KAAK,EAAE;AACP,aAAA,IAAI,CACH,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,KACvB,aAAa,CAAC,CAAC,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,QAAQ,EAAE,IAAI,CAAC;AACjD,YAAA,aAAa,CAAC,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,CAC9C,CAAC;KACL;AAEM,IAAA,gBAAgB,CACrB,YAA+C,EAAA;AAE/C,QAAA,OAAO,YAAY,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAI;YACxC,IAAI,CAAC,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,YAAY,EAAE,EAAE;gBACxC,OAAO,IAAI,CAAC,kBAAkB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACtC,aAAA;AAAM,iBAAA,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE;gBAC7D,OAAO,IAAI,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACjC,aAAA;iBAAM,IAAI,CAAC,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC,aAAa,EAAE,EAAE;gBACjD,OAAO,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACrC,aAAA;YAED,MAAM,MAAM,GAAG,IAAI,CAAC,wBAAwB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACnD,YAAA,OAAO,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,MAAM,CAAC;AAC/C,SAAC,CAAC,CAAC;KACJ;IAEM,kBAAkB,CACvB,CAA6B,EAC7B,CAA6B,EAAA;AAE7B,QAAA,IAAI,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC,EAAE,CAAC,EAAE,WAAW,IACpD,WAAW,CAAC,YAAY,EAAE,CAC3B,CAAC;QACF,IAAI,MAAM,KAAK,CAAC;AAAE,YAAA,OAAO,MAAM,CAAC;QAEhC,MAAM,GAAG,IAAI,CAAC,wBAAwB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC7C,QAAA,OAAO,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,MAAM,CAAC;KAC9C;IAEM,aAAa,CAClB,CAA6B,EAC7B,CAA6B,EAAA;AAE7B,QAAA,MAAM,GAAG,GAAG;AACV,YAAA,CAAC,EAAE,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,IAAI,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AAClE,YAAA,CAAC,EAAE,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,IAAI,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;SACnE,CAAC;AAEF,QAAA,IAAI,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE;YACnB,MAAM,MAAM,GAAG,IAAI,CAAC,wBAAwB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACnD,YAAA,OAAO,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,MAAM,CAAC;AAC9C,SAAA;AAED,QAAA,OAAO,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;KAC/B;IAEM,iBAAiB,CACtB,CAA6B,EAC7B,CAA6B,EAAA;QAE7B,IAAI,MAAM,GAAG,IAAI,CAAC,wBAAwB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACjD,IAAI,MAAM,KAAK,CAAC;AAAE,YAAA,OAAO,MAAM,CAAC;AAEhC,QAAA,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC,EAAE,CAAC,EAAE,WAAW,IAChD,WAAW,CAAC,aAAa,EAAE,CAC5B,CAAC;QACF,IAAI,MAAM,KAAK,CAAC;AAAE,YAAA,OAAO,MAAM,CAAC;AAEhC,QAAA,OAAO,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC;KACtB;AAEM,IAAA,kBAAkB,CACvB,CAA6B,EAC7B,CAA6B,EAC7B,SAA+D,EAAA;QAE/D,IAAI,SAAS,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC;AAAE,YAAA,OAAO,CAAC,CAAC;AAC3C,QAAA,OAAO,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;KAC9B;IAEM,wBAAwB,CAC7B,CAA6B,EAC7B,CAA6B,EAAA;QAE7B,IACE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,UAAU,CAAC,EAAE;YACpC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,UAAU,CAAC,EAAE,EACpC;AACA,YAAA,OAAO,CAAC,CAAC;AACV,SAAA;QAED,IACE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,UAAU,CAAC,EAAE;YACpC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,UAAU,CAAC,EAAE,EACpC;YACA,OAAO,CAAC,CAAC,CAAC;AACX,SAAA;QAED,OAAO,aAAa,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;KAC1C;AACF;;;;AClOM,MAAM,UAAU,GAAGC,6BAAW,CAAC,WAAW,CAC/C,CAAC,IAAY,KACX,CAAoD,iDAAA,EAAA,OAAO,cAAc,IAAI,CAAA,GAAA,CAAK,CACrF;;ACPD;AAsBO,MAAM,eAAe,GAAG,SAAS,CAAC;AAElC,MAAM,UAAU,GAAG,IAAI,GAAG,CAAyC;IACxE,CAAC,SAAS,EAAE,eAAe,CAAC;AAC7B,CAAA,CAAC,CAAC;AAEG,SAAU,aAAa,CAC3B,OAAyB,EAAA;IAEzB,MAAM,MAAM,GAA6C,EAAE,CAAC;IAC5D,IAAI,YAAY,GAAG,EAAE,CAAC;AAEtB,IAAA,KAAK,MAAM,IAAI,IAAI,OAAO,CAAC,IAAI,EAAE;QAC/B,IAAI,IAAI,CAAC,IAAI,KAAKD,0BAAQ,CAAC,cAAc,CAAC,iBAAiB,EAAE;AAC3D,YAAA,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACzB,SAAA;aAAM,IAAI,YAAY,CAAC,MAAM,EAAE;AAC9B,YAAA,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC1B,YAAY,GAAG,EAAE,CAAC;AACnB,SAAA;AACF,KAAA;IAED,IAAI,YAAY,CAAC,MAAM,EAAE;AACvB,QAAA,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAC3B,KAAA;AAED,IAAA,OAAO,MAAM,CAAC;AAChB,CAAC;AAEe,SAAA,OAAO,CACrB,KAAwC,EACxC,EACE,OAAO,EACP,OAAO,EACP,QAAQ,EAAE,YAAY,EACtB,MAAM,EACoB,EAAA;IAE5B,IAAI,CAAC,YAAY,EAAE;AACjB,QAAA,MAAM,IAAI,KAAK,CACb,CAAA,aAAA,EAAgB,YAAY,CAAqC,kCAAA,EAAA;YAC/D,GAAG,UAAU,CAAC,IAAI,EAAE;SACrB,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAA,CAAA,CAAG,CAChC,CAAC;AACH,KAAA;IAED,MAAM,aAAa,GAAG,UAAU,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IACnD,IAAI,CAAC,aAAa,EAAE;AAClB,QAAA,MAAM,IAAI,KAAK,CACb,6CAA6C,YAAY,CAAA,UAAA,CAAY,CACtE,CAAC;AACH,KAAA;IAED,MAAM,QAAQ,GAAG,IAAI,aAAa,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;IAC/C,IAAI,CAAC,QAAQ,CAAC,aAAa,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAE;AACxD,QAAA,MAAM,IAAI,KAAK,CACb,aAAa,YAAY,CAAA,kDAAA,CAAoD,CAC9E,CAAC;AACH,KAAA;AAED,IAAA,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;QACjB,OAAO;AACR,KAAA;AAED,IAAA,MAAM,UAAU,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC;AAC3C,IAAA,MAAM,YAAY,GAAG,KAAK,CAAC,GAAG,CAC5B,CAAC,IAAI,EAAE,GAAG,KACR,IAAI,0BAA0B,CAAC;QAC7B,IAAI;QACJ,GAAG;QACH,UAAU;QACV,KAAK;QACL,QAAQ;AACT,KAAA,CAAC,CACL,CAAC;IAEF,IAAI,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;AAC7B,IAAA,IAAI,GAAG,GAAG,CAAC,GAAI,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAgC,CAAC,KAAK,CAAC;IAEjE,KAAK,MAAM,OAAO,IAAI,OAAO,CAAC,QAAQ,IAAI,EAAE,EAAE;QAC5C,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC;QACrC,QAAQ,OAAO,CAAC,IAAI;AAClB,YAAA,KAAKA,0BAAQ,CAAC,eAAe,CAAC,KAAK;AACjC,gBAAA,IACE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI;AACrB,oBAAA,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAgC,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAC3D;AACA,oBAAA,KAAK,GAAG,MAAM,GAAG,KAAK,GAAG,MAAM,GAAG,KAAK,CAAC;AACzC,iBAAA;AAED,gBAAA,IACE,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,KAAK,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI;AAC/C,oBAAA,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI;AACjB,wBAAA,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAgC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAC3D;AACA,oBAAA,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,CAAC;AAC/B,iBAAA;gBACD,MAAM;AAER,YAAA,KAAKA,0BAAQ,CAAC,eAAe,CAAC,IAAI;AAChC,gBAAA,IACE,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI;AACnB,oBAAA,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAgC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EACzD;oBACA,SAAS;AACV,iBAAA;AACD,gBAAA,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,CAAC;gBAC9B,MAAM;AACT,SAAA;AACF,KAAA;IAED,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;AAEpD,IAAA,IAAI,UAAU,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,KAAK,MAAM,EAAE;QACrD,OAAO;AACR,KAAA;IAED,OAAO,CAAC,MAAM,CAAC;AACb,QAAA,SAAS,EAAE,SAAS;AACpB,QAAA,GAAG,EAAE;AACH,YAAA,KAAK,EAAE,UAAU,CAAC,eAAe,CAAC,KAAK,CAAC;AACxC,YAAA,GAAG,EAAE,UAAU,CAAC,eAAe,CAAC,GAAG,CAAC;AACrC,SAAA;AACD,QAAA,GAAG,EAAE,KAAK,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAE,MAAM,CAAC;AAC3D,KAAA,CAAC,CAAC;AACL,CAAC;AAED,cAAe,UAAU,CAAqB;AAC5C,IAAA,IAAI,EAAE,SAAS;AACf,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,QAAQ;AACd,QAAA,IAAI,EAAE;AACJ,YAAA,WAAW,EAAE,sCAAsC;AACnD,YAAA,WAAW,EAAE,KAAK;AACnB,SAAA;AACD,QAAA,OAAO,EAAE,MAAM;AACf,QAAA,MAAM,EAAE;AACN,YAAA,IAAI,EAAE,OAAO;AACb,YAAA,WAAW,EAAE;AACX,gBAAA,QAAQ,EAAE;AACR,oBAAA,IAAI,EAAE,CAAC,GAAG,UAAU,CAAC,IAAI,EAAE,CAAC;AAC7B,iBAAA;AACF,aAAA;AACD,YAAA,KAAK,EAAE;AACL,gBAAA;AACE,oBAAA,IAAI,EAAE,QAAQ;AACd,oBAAA,oBAAoB,EAAE,KAAK;AAC3B,oBAAA,UAAU,EAAE;AACV,wBAAA,QAAQ,EAAE;AACR,4BAAA,WAAW,EAAE,CAA6C,0CAAA,EAAA;gCACxD,GAAG,UAAU,CAAC,IAAI,EAAE;AACrB,6BAAA,CAAC,IAAI,CAAC,GAAG,CAAC,CAAI,EAAA,CAAA;AACf,4BAAA,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,wBAAwB,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;AAChE,yBAAA;AACD,wBAAA,MAAM,EAAE,EAAE;AACX,qBAAA;AACF,iBAAA;AACF,aAAA;AACF,SAAA;AACD,QAAA,QAAQ,EAAE;AACR,YAAA,OAAO,EAAE,CAAuD,qDAAA,CAAA;AACjE,SAAA;AACF,KAAA;AACD,IAAA,cAAc,EAAE;AACd,QAAA;AACE,YAAA,QAAQ,EAAE,eAAe;AACzB,YAAA,MAAM,EAAE,EAAE;AACX,SAAA;AACF,KAAA;AACD,IAAA,MAAM,CACJ,OAA2D,EAC3D,CAAC,OAAO,CAAoB,EAAA;QAE5B,OAAO;AACL,YAAA,OAAO,EAAE,CAAC,OAAyB,KAAU;AAC3C,gBAAA,KAAK,MAAM,KAAK,IAAI,aAAa,CAAC,OAAO,CAAC,EAAE;AAC1C,oBAAA,OAAO,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,OAAO,EAAE,CAAC,CAAC;AAClD,iBAAA;aACF;SACF,CAAC;KACH;AACF,CAAA,CAAC;;ACxMF,YAAe;IACb,OAAO;CACR;;ACFD,YAAe;IACb,KAAK;CACN;;;;"}